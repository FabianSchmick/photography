<?php

namespace App\Repository;

use App\Entity\Entry;
use App\Entity\Tag;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * EntryRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntryRepository extends EntityRepository
{
    /**
     * Find entries query by a tag.
     */
    public function findEntriesByTag(Tag $tag): Query
    {
        $qb = $this->createQueryBuilder('e')
            ->where(':tag MEMBER OF e.tags')
            ->setParameters(['tag' => $tag])
            ->orderBy('e.timestamp', 'DESC');

        return $qb->getQuery();
    }

    public function findByTimestamp(Entry $entry, string $compare = '<', string $order = 'DESC'): ?Entry
    {
        $qb = $this->createQueryBuilder('e')
            ->where("e.timestamp {$compare} :timestamp")
            ->andWhere('e != :entry')
            ->orderBy('e.timestamp', $order)
            ->setMaxResults(1)
            ->setParameters([
                'entry' => $entry,
                'timestamp' => $entry->getTimestamp(),
            ])
            ->getQuery();

        return $qb->getOneOrNullResult();
    }

    /**
     * Return query to load all entries.
     */
    public function getFindAllQuery(): Query
    {
        $query = $this->createQueryBuilder('e')
            ->select('e')
            ->orderBy('e.timestamp', 'DESC')
            ->getQuery();

        return $query;
    }

    /**
     * Find an entry by criteria
     * Need this special function, because of translatable
     * https://github.com/stof/StofDoctrineExtensionsBundle/issues/232.
     */
    public function findOneByCriteria(array $params): ?Entry
    {
        $query = $this->createQueryBuilder('e');

        foreach ($params as $column => $value) {
            $query->andWhere("e.$column = :$column")
                ->setParameter($column, $value);
        }

        $query = $query->getQuery();

        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker');

        return $query->getOneOrNullResult();
    }
}
