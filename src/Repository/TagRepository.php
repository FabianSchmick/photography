<?php

namespace App\Repository;

use App\Entity\Tag;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * TagRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends EntityRepository
{
    /**
     * Find related tags by a tag.
     * Method returns the tags from all entries which relate to the current tag under the following conditions:
     *      - excluding the requested tag
     *      - occurrence of min $count times
     *      - max $limit related tags.
     *
     * @param Tag $tag
     * @param int $count
     * @param int $limit
     *
     * @return array
     */
    public function findRelatedTagsByTag(Tag $tag, int $count = 3, int $limit = 10): array
    {
        $in = $this->getEntityManager()->getRepository('App:Entry')
            ->createQueryBuilder('a_e')
            ->where(':tag MEMBER OF a_e.tags');

        $qb = $this->createQueryBuilder('b_t');
        $qb->innerJoin('b_t.entries', 'b_te')
            ->where($qb->expr()->in('b_te', $in->getDQL()))
            ->andWhere('b_t != :tag')
            ->orderBy('COUNT(b_t)', 'DESC')
            ->addOrderBy('b_t.sort', 'DESC')
            ->groupBy('b_t')
            ->having('COUNT(b_t) >= '.$count)
            ->setMaxResults($limit)
            ->setParameters(['tag' => $tag]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Find a tag by criteria
     * Need this special function, because of translatable
     * https://github.com/stof/StofDoctrineExtensionsBundle/issues/232.
     *
     * @param $params
     *
     * @return Tag|null
     */
    public function findOneByCriteria(array $params): ?Tag
    {
        $query = $this->createQueryBuilder('t');

        foreach ($params as $column => $value) {
            $query->andWhere("t.$column = :$column")
                ->setParameter($column, $value);
        }

        $query = $query->getQuery();

        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker');

        return $query->getOneOrNullResult();
    }
}
